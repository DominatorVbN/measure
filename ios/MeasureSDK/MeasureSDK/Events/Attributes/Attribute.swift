//
//  Attribute.swift
//  MeasureSDK
//
//  Created by Adwin Ross on 19/08/24.
//

import Foundation

struct Attribute: Codable {
    
    /// A unique identifier for an installation of an app, generated by the client.
    let installationId: String
    
    /// The app version identifier.
    let appVersion: String
    
    /// The app build identifier.
    let appBuild: String
    
    /// The app bundle identifier.
    let appUniqueId: String
    
    /// The platform of the app. Expected values:
    /// - "android"
    /// - "ios"
    /// - "flutter"
    let platform: String
    
    /// The Measure SDK version identifier.
    let measureSdkVersion: String
    
    /// The thread on which the event was captured. Can be `nil` if not available.
    let threadName: String?
    
    /// The ID of the app's end user. Can be `nil` if not available.
    let userId: String?
    
    /// The name of the device. Can be `nil` if not available.
    let deviceName: String?
    
    /// The model of the device. Can be `nil` if not available.
    let deviceModel: String?
    
    /// The manufacturer of the device. Can be `nil` if not available.
    let deviceManufacturer: String?
    
    /// The type of the device. Expected values:
    /// - "phone"
    /// - "tablet"
    /// Can be `nil` if not available.
    let deviceType: String?
    
    /// Indicates whether the device is foldable. Can be `nil` if not available.
    let deviceIsFoldable: Bool?
    
    /// Indicates whether the device is physical. Can be `nil` if not available.
    let deviceIsPhysical: Bool?
    
    /// The DPI density of the device. Can be `nil` if not available.
    let deviceDensityDpi: Int?
    
    /// The screen width of the device in pixels. Can be `nil` if not available.
    let deviceWidthPx: Int?
    
    /// The screen height of the device in pixels. Can be `nil` if not available.
    let deviceHeightPx: Int?
    
    /// The device density. Can be `nil` if not available.
    let deviceDensity: Int?
    
    /// The locale of the device, based on RFC 5646 (e.g., "en-US"). Can be `nil` if not available.
    let deviceLocale: String?
    
    /// The operating system name. Can be `nil` if not available.
    let osName: String?
    
    /// The operating system version. Can be `nil` if not available.
    let osVersion: String?
    
    /// The type of network the device is connected to. Expected values:
    /// - "wifi"
    /// - "cellular"
    /// - "vpn"
    /// - "unknown"
    /// - "no_network"
    let networkType: String
    
    /// The network provider name (e.g., "Airtel", "T-Mobile"). Can be "unknown" if unavailable.
    let networkProvider: String
    
    /// The network generation. Expected values:
    /// - "2g"
    /// - "3g"
    /// - "4g"
    /// - "5g"
    /// - "unknown"
    let networkGeneration: String

    init(installationId: String, 
         appVersion: String,
         appBuild: String,
         appUniqueId: String,
         platform: String,
         measureSdkVersion: String,
         threadName: String?,
         userId: String?,
         deviceName: String?,
         deviceModel: String?,
         deviceManufacturer: String?,
         deviceType: String?,
         deviceIsFoldable: Bool?,
         deviceIsPhysical: Bool?,
         deviceDensityDpi: Int?,
         deviceWidthPx: Int?,
         deviceHeightPx: Int?,
         deviceDensity: Int?,
         deviceLocale: String?,
         osName: String?,
         osVersion: String?,
         networkType: String,
         networkProvider: String,
         networkGeneration: String) {
        assert(["wifi", "cellular", "vpn", "unknown", "no_network"].contains(networkType), "networkType can only be `wifi`, `cellular`, `vpn`, `unknown`, `no_network`.")
        assert(["2g", "3g", "4g", "5g", "unknown"].contains(networkGeneration), "networkType can only be `2g`, `3g`, `4g`, `5g`, `unknown`.")
        self.installationId = installationId
        self.appVersion = appVersion
        self.appBuild = appBuild
        self.appUniqueId = appUniqueId
        self.platform = platform
        self.measureSdkVersion = measureSdkVersion
        self.threadName = threadName
        self.userId = userId
        self.deviceName = deviceName
        self.deviceModel = deviceModel
        self.deviceManufacturer = deviceManufacturer
        self.deviceType = deviceType
        self.deviceIsFoldable = deviceIsFoldable
        self.deviceIsPhysical = deviceIsPhysical
        self.deviceDensityDpi = deviceDensityDpi
        self.deviceWidthPx = deviceWidthPx
        self.deviceHeightPx = deviceHeightPx
        self.deviceDensity = deviceDensity
        self.deviceLocale = deviceLocale
        self.osName = osName
        self.osVersion = osVersion
        self.networkType = networkType
        self.networkProvider = networkProvider
        self.networkGeneration = networkGeneration
    }

    init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        
        installationId = try values.decode(String.self, forKey: .installationId)
        appVersion = try values.decode(String.self, forKey: .appVersion)
        appBuild = try values.decode(String.self, forKey: .appBuild)
        appUniqueId = try values.decode(String.self, forKey: .appUniqueId)
        platform = try values.decode(String.self, forKey: .platform)
        measureSdkVersion = try values.decode(String.self, forKey: .measureSdkVersion)
        threadName = try values.decodeIfPresent(String.self, forKey: .threadName)
        userId = try values.decodeIfPresent(String.self, forKey: .userId)
        deviceName = try values.decodeIfPresent(String.self, forKey: .deviceName)
        deviceModel = try values.decodeIfPresent(String.self, forKey: .deviceModel)
        deviceManufacturer = try values.decodeIfPresent(String.self, forKey: .deviceManufacturer)
        deviceType = try values.decodeIfPresent(String.self, forKey: .deviceType)
        deviceIsFoldable = try values.decodeIfPresent(Bool.self, forKey: .deviceIsFoldable)
        deviceIsPhysical = try values.decodeIfPresent(Bool.self, forKey: .deviceIsPhysical)
        deviceDensityDpi = try values.decodeIfPresent(Int.self, forKey: .deviceDensityDpi)
        deviceWidthPx = try values.decodeIfPresent(Int.self, forKey: .deviceWidthPx)
        deviceHeightPx = try values.decodeIfPresent(Int.self, forKey: .deviceHeightPx)
        deviceDensity = try values.decodeIfPresent(Int.self, forKey: .deviceDensity)
        deviceLocale = try values.decodeIfPresent(String.self, forKey: .deviceLocale)
        osName = try values.decodeIfPresent(String.self, forKey: .osName)
        osVersion = try values.decodeIfPresent(String.self, forKey: .osVersion)
        networkType = try values.decode(String.self, forKey: .networkType)
        networkProvider = try values.decode(String.self, forKey: .networkProvider)
        networkGeneration = try values.decode(String.self, forKey: .networkGeneration)
    }

    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(installationId, forKey: .installationId)
        try container.encode(appVersion, forKey: .appVersion)
        try container.encode(appBuild, forKey: .appBuild)
        try container.encode(appUniqueId, forKey: .appUniqueId)
        try container.encode(platform, forKey: .platform)
        try container.encode(measureSdkVersion, forKey: .measureSdkVersion)
        try container.encode(threadName, forKey: .threadName)
        try container.encode(userId, forKey: .userId)
        try container.encode(deviceName, forKey: .deviceName)
        try container.encode(deviceModel, forKey: .deviceModel)
        try container.encode(deviceManufacturer, forKey: .deviceManufacturer)
        try container.encode(deviceType, forKey: .deviceType)
        try container.encode(deviceIsFoldable, forKey: .deviceIsFoldable)
        try container.encode(deviceIsPhysical, forKey: .deviceIsPhysical)
        try container.encode(deviceDensityDpi, forKey: .deviceDensityDpi)
        try container.encode(deviceWidthPx, forKey: .deviceWidthPx)
        try container.encode(deviceHeightPx, forKey: .deviceHeightPx)
        try container.encode(deviceDensity, forKey: .deviceDensity)
        try container.encode(deviceLocale, forKey: .deviceLocale)
        try container.encode(osName, forKey: .osName)
        try container.encode(osVersion, forKey: .osVersion)
        try container.encode(networkType, forKey: .networkType)
        try container.encode(networkProvider, forKey: .networkProvider)
        try container.encode(networkGeneration, forKey: .networkGeneration)
    }

    // Coding keys matching the original JSON field names
    enum CodingKeys: String, CodingKey {
        case installationId = "installation_id"
        case appVersion = "app_version"
        case appBuild = "app_build"
        case appUniqueId = "app_unique_id"
        case platform
        case measureSdkVersion = "measure_sdk_version"
        case threadName = "thread_name"
        case userId = "user_id"
        case deviceName = "device_name"
        case deviceModel = "device_model"
        case deviceManufacturer = "device_manufacturer"
        case deviceType = "device_type"
        case deviceIsFoldable = "device_is_foldable"
        case deviceIsPhysical = "device_is_physical"
        case deviceDensityDpi = "device_density_dpi"
        case deviceWidthPx = "device_width_px"
        case deviceHeightPx = "device_height_px"
        case deviceDensity = "device_density"
        case deviceLocale = "device_locale"
        case osName = "os_name"
        case osVersion = "os_version"
        case networkType = "network_type"
        case networkProvider = "network_provider"
        case networkGeneration = "network_generation"
    }
}
